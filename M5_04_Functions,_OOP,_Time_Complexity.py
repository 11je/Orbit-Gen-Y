# -*- coding: utf-8 -*-
"""KM-05: Functions, OOP, Time Complexity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h8bkwDl1j-xWVdEnVlXb73xBZZ5dWcIC

# **Fungsi**
"""

# Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("wokee")

# Latihan 
def bunga(a):  # Deklarasi Fungsi
  print(a)

bunga("Tulip") # Memanggil Fungsi

# Deklarasi Fungsi dengan pengembalian
def tambah(a, b):
  return a + b;

# Memanggil Fungsi
print(tambah(2, 3))

# Latihan 
def perkalian(x, y):   # Deklarasi Fungsi dengan pengembalian
  return x/y;

print(perkalian(10,2)) # Memanggil Fungsi

"""def nama_fungsi(arg1, arg2, ...):
  # isi fungsi

def fungsi_dengan_pengembalian(arg1, arg2, ...):
  # isi fungsi
  return 'sesuatu'

# **Method**

Rumus
class NamaClass:
  def nama_method(arg1, arg2, ...):
    # isi method
"""

# Deklarasi Object (Class)
class Kucing(object):
  def meong(self):
    print("meeooong")

# Memanggil method
cat = Kucing()
cat.meong()

# Latihan 
class bunga(object):    # Deklarasi Object (Class)
  def aroma(self):
    print("Harum")

flower = bunga()        # Memanggil method
flower.aroma()

"""# **Lambda Expression**"""

# Lambda expression
tambah = lambda a, b: (a + b)
print(tambah(2, 3))

# Latihan
kali = lambda a, b: (a * b)  # Lambda expression
print(kali(5, 2))

"""# **Object Oriented Programming**

## **Encapsulation**
"""

nama = "cemong"
usia = 1
warna = "putih coklat muda"
jenis = "anggora"

def meongg():
  print("meeeoonnggg... ")

def info_kucing(nama, usia, warna, jenis):
  print(f"nama: {nama}, usia: {usia}, warna: {warna}, jenis: {jenis}")

info_kucing(nama, usia, warna, jenis)


class Kucing:
  def __init__(self, nama, usia, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def meong(self):
    print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, warna: {self.warna}, jenis: {self.jenis}")


kucing1 = Kucing("cemong", 1, "putih coklat muda", "anggora")

kucing1.info()

"""## **Abstraction**"""

# Memanggil method dari objek tanpa harus mengetahui cara kerja method
kucing1.myfunc()

"""## **Inheritence**"""

class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


animal1 = Binatang("cemong", 1, "omnivora", True)

animal1.info()

class Kucing(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_kucing):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_kucing = jenis_kucing
  
  def meong(self):
    print("meeeonnggg")

  def info_kucing(self):
    print(f"warna: {self.warna}, jenis kucing: {self.jenis_kucing}")

cat1 = Kucing("cemong", 1, "omnivora", True, "putih coklat muda", "anggora")

cat1.info()
cat1.info_kucing()

"""## **Polymorphism**"""

class Ikan(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_air, jenis_ikan):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_air = jenis_air
    self.jenis_ikan = jenis_ikan
  
  def berenang(self, durasi):
    print("wushh... wush... ")

  def info_ikan(self):
    print(f"warna: {self.warna}, jenis ikan: {self.jenis_ikan}, jenis air: {self.jenis_air}")

fish1 = Ikan("Jago", 2, "omnivora", False, "Merah Putih", "Tawar", "Cupang")

fish1.info()
fish1.info_ikan()
fish1.tidur(5)

"""## **Activity OOP**

Buatlah 3 OOP beserta turunannya dari objek sekitar, buat ulang seperti yang diatas (encapsulation, abstaction, inheritance, polymorphism)

# **1. Intan**
"""

# Enkapsulation
barang = "Meja belajar"
bahan = "Kayu Jati"
warna = "coklat"
jumlah = 2

def jenis():
  print("Meja Belajar olympics")

def info_meja(barang, bahan, warna, jumlah):
  print(f"barang : {barang}, bahan : {bahan}, warna : {warna}, jumlah : {jumlah}")

info_meja(barang, bahan, warna, jumlah)


class Meja:
  def __init__(self, barang, bahan, warna, jumlah):
    self.barang = barang
    self.bahan = bahan
    self.warna = warna
    self.jumlah = jumlah

  def myluv(self):
    print("Barang yang sering digunakan " + self.barang)
  
  def jenis(self):
    print("Meja Belajar Osweet")

  def info(self):
    print(f"barang : {self.barang}, bahan : {self.bahan}, warna : {self.warna}, jumlah : {self.jumlah}")


mejaku = Meja("Meja belajar", "Kayu Jati", "coklat", 2)

mejaku.info()

#Abstraction 
# Memanggil method dari objek tanpa harus mengetahui cara kerja method
mejaku.myluv()

# Inheritence

class Benda(object):
  def __init__(self, barang, bahan, kokoh):
    self.barang = barang
    self.bahan = bahan
    self.kokoh = kokoh

  def tinggi(self, berapa):
    for x in range(berapa):
      print("Tingginya 130 cm")

  def info(self):
    print(f"barang : {self.barang}, bahan : {self.bahan}, kokoh: {self.kokoh}")


object1 = Benda("Meja", "Kayu Jati",  True)

object1.info()

class Meja(Benda):
  def __init__(self,  barang, bahan, kokoh, warna,jumlah, guna):
    super().__init__(barang, bahan, kokoh)
    self.warna = warna
    self.jumlah = jumlah
    self.guna = guna
  
  def jenis(self):
    print("Meja Belajar Osweet")

  def info_benda(self):
    print(f"warna : {self.warna}, jumlah: {self.jumlah}, guna : {self.guna}")
# warna :{self.warna},

bendaku = Meja("Meja", "Kayu Jati",  True, "coklat", 2, "sebagai alas")

bendaku.info()
bendaku.info_benda()

# Polymorphism
class Kursi(Benda):
  def __init__(self,  barang, bahan, kokoh, warna, model, jenis_guna):
    super().__init__(barang, bahan, kokoh)
    self.warna = warna
    self.model = model
    self.jenis_guna = jenis_guna
  
  def panjang(self, berapa):
    print("Bisa buat rebahan....")

  def info_kursi(self):
    print(f"warna : {self.warna}, model : {self.model}, jenis guna : {self.jenis_guna}")

kursiku = Kursi("Kursi Tamu", "Kayu Jati",  False, "Coklat muda", "Kursi panjang resban", "Kursi tunggu")

kursiku.info()
kursiku.info_kursi()
kursiku.tinggi(3)

"""# **Time Complexity**
## Activity 

Hitung time complexity dengan bigO Notation pada algoritma berikut:

* Tidak perlu di run

**NB** : Abaikan konstanta dan ambil nilai tertinggi
"""

# 1 = Big O(3) = O(1)

arr = [1, 2, 3, 4, 5]       

print(arr[0])     # O(1)
print(arr[1])     # O(1) 

# O(1+1) = O(2) kontstan maka O(1), Constant Time

# 2 = Big O(n+3) = O(n)

print(arr[2])       # O(1)
for number in arr:  # O(n)
  print(number)     
print(arr[1])       # O(1)
print(arr[2])       # O(1) 

# O(1+n+1+1)= O(n+3) maka diambil nilai tertinggi O(n),Linear Time

# 3

arr2 = [6, 7, 8, 9, 10]

for number in arr:    # O(n)
  print(number)
for number in arr2:   # O(n)
  print(number)
print(arr2[4])        # O(1)

# O(n+n+1) = O(2n+1) = O(n), Linear Time

# 4 

print(arr2[1])        # O(1)
for number in arr:    # O(n)
  print(number)
for number in arr:    # O(n)
  print(number)

# O(1+n+n) = O(1+2n) = O(n), Linear Time

# 5 

for number in arr:        # O(n)
  for number2 in arr2:    # O(n)
    print(number+number2)
print(arr[1]+arr2[1])     # O(1)
print(arr2[2])            # O(1)\

# O((n*n)+1+1) = O(n^2 + 2) = O(n^2), Quadratic Time

# 6 

for number in arr:          # O(n)
  for number2 in arr:       # O(n)
    print(number+number2)
print(arr)                  # O(1)

# O((n*n)+1) = o(n^2 + 1) = O(n^2), Quadratic Time

# 7 

for number in arr:                    # O(n)
  for number2 in arr2:                # O(n)
    for number3 in arr:               # O(n)
      print(number+number2+number3)
print(arr[1])                         # O(1)
print(arr2[2])                        # O(1)
print(arr2[3])                        # O(1)

# O((n*n*n)+1+1+1 = O(n^3 + 3) = O(n^3), Cubic Time

# 8 

for number in arr:          # O(n)
  print(number)
print(arr2)                 # O(1)
for number in arr:          # O(n)
  for number2 in arr2:      # O(n)
    print(number+number2)
print(arr)                  # O(1)

# O(n+1+(n*n)+1) = O(n^2 + n + 2) = O(n^2), Quadratic Time

# 9 

# Algoritma bubble sort_latihan mandiri
def bubbleSort(angka):
    posisi = 0
    for b in range(len(angka)-1):                             # O(n)
        for a in range(len(angka)-1-b):                       # O(n)
            if angka[a]>angka[a+1]:                           
                angka[a],angka[a+1]=angka[a+1],angka[a]
        posisi+=1
        print(posisi,angka)
 
angka = [21, 7, 1, 9, 3, 15, 8, 20, 5]
print('Urutan angka sebelum sorting :', angka)                # O(1)
bubbleSort(angka)                                             # O(1)
print('Urutan angka setelah sorting :', angka)                # O(1)

# O((n*n)+1+1+1) = O(n^2 + 3) = O(n^2), Quadratic Time => Nested Loop

# 10

# Algoritma linear search_Latihan
def linierSearch(angka, cari):                            
  posisi = 0
  ketemu = False

  while posisi<len(angka) and not ketemu:                   # O(1)
    if dicari == lists[posisi]:
      ketemu = True
    posisi+=1
  print('----------------------------------')
  print('|  Angka ketemu di index ke- %i   |'%posisi)
  print('----------------------------------')
lists = []
a = int(input('Masukan jumlah list : '))                    # O(1)
for i in range(a):                                          # O(n)
  x = int(input('Masukan angka ke %i untuk list = '%(i+1)))
  lists.append(x)

print('__________________________________')
dicari = int(input('<==========Cari angka==========> '))    # O(1)
linierSearch(lists,dicari)                                  # O(1)

# O(1+n+1+1) = O(n+3) = O(n), Linear Time

# 11 O Log(n)

# Algoritma binary search_Latihan
def binary_search(angka,listku):            
  listku.sort() # Penyortiran List
  langkah = 0
  ketemu = False
  awal = 0
  akhir = len(listku)-1
  while awal <= akhir and not ketemu:       # O(n)
    tengah = (awal+akhir)//2
    if listku[tengah] == angka:         
      ketemu = True
    elif angka > tengah:
      awal = tengah+1
    else:
      akhir = tengah-1
    langkah+=1

  if ketemu:
    print ("________________________________________________________")
    print ("Angka ditemukan!")
    print ("posisi angka yang ditemukan setelah diurutkan adalah %s" % str(awal+1))
    print ("________________________________________________________")
  else:
    print ("Angka tidak ditemukan!")
  print ("Proses langkah ke- %s " % langkah)

binary_search(18,[3,1,7,2,18,5])